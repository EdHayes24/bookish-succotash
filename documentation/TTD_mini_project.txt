TTD Mini Project
# Update modified Products_operations menu to the main script
# Consider a generic function for updating list of dictionaries and data type expected in tuples?
# Investigate the effect of products_list being a list of dictionaries on the other functions
# 


Actions:
# Added a literal shallow copy of a product dictionary using <dict_obj>.copy()
# ^^ enables use of commit_changes(original_object, new_object)
# Completed Actions:
16/11/22 - Print orders list sorted by courier &/or by order_status
16/11/22 - Corrected options_selector error when input = -1 (negative list index printing not caught before Error Message)
16/11/22 - Added Conversion of String Representation of List to List upon Loading of couriers_list["Orders"] from CSV using DictReader
17/11/22 - Added Detailed README.md file to the project
18/11/22 - Fixed the build app errors with dockerised python linked to mysql db
18/11/22 - Moved options_selector() out of main and into err_catching_helper_functions
21/11/22 - Renamed Docker containers using .env and YAML files
21/11/22 - Added formatting option to print_list_of_dicts()
21/11/22 - Populated tables with dummy values of correct format
22/11/22 - Functions to format a list into a string sutiable for SQL Column name and Value commands
22/11/22 - Function for insert rows to MySQL Table
22/11/22 - Function for create MySQL Table
22/11/22 - Function for get col names from MySQL Table
22/11/22 - Function for get col data types from MySQL Table
22/11/22 - Upon deletion of order object, courier list of associated orders now updated
22/11/22 - Reformatted files and spacing for readability
22/11/22 -  



TTD NEW:
15/11/22: INCOMPLETE
- Function to add to a specific data type key in a dictionary?

16/11/22: INCOMPLETE
- On Order Creation, append order_ID to Courier Dictionary
- Check the Order Update and Courier Updates don't invalidate one another - should we be able to mutate both sides?
- Update the Order_ID when the Name on the order changes in both the courier dict and the order dict
- Add Unit tests for file handling helper functions
- Add Unit tests for decoration helper functions 
- Add Unit tests for unique_str_helper_functions
- Remove Shallow/Deep Copy operations which clutter code 
- Fix messy order_by for printing orders_list. Can we do similar for the Products and Couriers Lists?

17/11/22: INCOMPLETE
- Code Commentary Cleanups
- wk5: save/read to/from database table instead of CSV for Products and Couriers List
- With 

18/11/22: INCOMPLETE
- Remove dependencies of pyfiglet from main script
- Notes: Create a requirements.txt to pip install from for both Docker and in general

22/11/22: INCOMPLETE
- Create functions for common SQL tasks
-* Orders List Table printed is unreadable due to length of fields - reformat the data fields associated with product selector functions
    # e.g. tuples or dict for order_dict
    # order_dict["Items"] = {"selection": ["chocolate", "chicken", "slumpie"], "count": [3, 2, 1]}
    # order_dict["Items"] = [("chocolate", 3), ("chicken", 2), ("slumpie", 1)]
- Add a total price calculation field for each order to update on changes to quantity/product
- prevent 0 quantity being entered for products in product_selector functions
- functionalise order_list sort feature after fixing action '-*' from above (nested dicts to sort by dtype before other things)
- minimum information relationship similar to MySQL Table? (E.g. order + courier only have ID as foreign keys in each others tables)
- Update Time field to include  hh:mm - will facilitate time since ordered etc... in future